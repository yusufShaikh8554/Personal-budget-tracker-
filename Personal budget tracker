# Personal-budget-tracker-

#1. Expence and intrance entry: allow user to input Expences and intrance with category and amount.

# Initialize an empty dictionary to store expenses and income
transactions = {}

while True:
    print("Choose an option:")
    print("1. Record an Expense")
    print("2. Record an Income")
    print("3. View Transactions")
    print("4. Exit")

    choice = input("Enter your choice (1/2/3/4): ")

    if choice == '1':
        category = input("Enter the expense category: ")
        amount = float(input("Enter the expense amount: "))
        transactions.setdefault(category, []).append(-amount)  # Use negative amount to indicate expense

    elif choice == '2':
        category = input("Enter the income category: ")
        amount = float(input("Enter the income amount: "))
        transactions.setdefault(category, []).append(amount)

    elif choice == '3':
        for category, amounts in transactions.items():
            total = sum(amounts)
            print(f"{category}: {total}")

    elif choice == '4':
        break

    else:
        print("Invalid choice. Please enter 1, 2, 3, or 4.")

# You can add more functionality for data storage, export, or analysis as needed.


#2. Budget calculation: calculate the remaining budget after deduting  expenses from income :-


# Get user input for income and expenses
income = float(input("Enter your income: "))
expenses = float(input("Enter your expenses: "))

# Calculate the remaining budget
remaining_budget = income - expenses

# Display the remaining budget
print(f"Your remaining budget is: {remaining_budget}")

#3. Expenses analysis: provide insights by categorizing expenses and displaying spending trends

import pandas as pd
import matplotlib.pyplot as plt

# Load expense data (assuming it's in a CSV file)
expense_data = pd.read_csv('expense_data.csv')

# Categorize expenses
def categorize_expense(description):
    # Implement your logic for categorization here
    if 'food' in description.lower():
        return 'Food'
    elif 'transport' in description.lower():
        return 'Transportation'
    # Add more categories as needed
    else:
        return 'Other'

expense_data['Category'] = expense_data['Description'].apply(categorize_expense)

# Calculate total spending by category
category_spending = expense_data.groupby('Category')['Amount'].sum()

# Create a pie chart to visualize spending by category
plt.figure(figsize=(8, 8))
plt.pie(category_spending, labels=category_spending.index, autopct='%1.1f%%')
plt.title('Expense Distribution by Category')
plt.show()

# Calculate monthly spending trends
expense_data['Date'] = pd.to_datetime(expense_data['Date'])
monthly_spending = expense_data.groupby(expense_data['Date'].dt.to_period('M'))['Amount'].sum()

# Create a line chart to visualize monthly spending trends
plt.figure(figsize=(10, 6))
monthly_spending.plot(kind='line', marker='o')
plt.title('Monthly Expense Trends')
plt.xlabel('Month')
plt.ylabel('Total Spending')
plt.grid(True)
plt.show()


#4. Data persistence: Store transaction in a file/database for tracking over time.

import csv
import sqlite3

# Sample transaction data
transaction = {'date': '2023-10-18', 'description': 'Purchase', 'amount': 100.00}

# Store the transaction in a CSV file
with open('transactions.csv', 'a', newline='') as csvfile:
    fieldnames = ['date', 'description', 'amount']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    # Write the transaction data to the CSV file
    writer.writerow(transaction)

# Store the transaction in a SQLite database
conn = sqlite3.connect('transactions.db')
cursor = conn.cursor()

# Create the transactions table if it doesn't exist
cursor.execute('''
    CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT,
        description TEXT,
        amount REAL
    )
''')

# Sample transaction data
transaction_data = ('2023-10-18', 'Purchase', 100.00)

# Insert the transaction into the database
cursor.execute('INSERT INTO transactions (date, description, amount) VALUES (?, ?, ?)', transaction_data)

# Commit changes and close the connection
conn.commit()
conn.close()
